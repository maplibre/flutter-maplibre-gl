// This file is generated by
// ./scripts/lib/generate.dart

package org.maplibre.maplibregl;

import org.maplibre.android.style.expressions.Expression;
import org.maplibre.android.style.layers.PropertyFactory;
import org.maplibre.android.style.layers.PropertyValue;

import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonParser;
import com.google.gson.JsonPrimitive;

import static org.maplibre.maplibregl.Convert.toMap;

class LayerPropertyConverter {
{{#layerTypes}}
  static PropertyValue[] interpret{{typePascal}}LayerProperties(Object o) {
    final Map<String, String> data = (Map<String, String>) toMap(o);
    final List<PropertyValue> properties = new LinkedList();
    final JsonParser parser = new JsonParser();

    for (Map.Entry<String, String> entry : data.entrySet()) {
      final JsonElement jsonElement = parser.parse(entry.getValue());
      Expression expression = Expression.Converter.convert(jsonElement);
      switch (entry.getKey()) {
        {{#paint_properties}}
        {{^isFloatArrayProperty}}
        case "{{value}}":
          properties.add(PropertyFactory.{{valueAsCamelCase}}(expression));
        {{/isFloatArrayProperty}}
        {{#isFloatArrayProperty}}
        case "{{value}}":
          if (jsonElement.isJsonArray()) {
            final Float[] floatArray = convertJsonToFloatArray(jsonElement);
            if (floatArray != null) {
              properties.add(PropertyFactory.{{valueAsCamelCase}}(floatArray));
            } else {
              properties.add(PropertyFactory.{{valueAsCamelCase}}(expression));
            }
          } else {
            properties.add(PropertyFactory.{{valueAsCamelCase}}(expression));
          }
        {{/isFloatArrayProperty}}
          break;
        {{/paint_properties}}
        {{#layout_properties}}
        {{^isFloatArrayProperty}}
        {{^isVisibilityProperty}}
        {{^requiresLiteral}}
        case "{{value}}":
          properties.add(PropertyFactory.{{valueAsCamelCase}}(expression));
        {{/requiresLiteral}}
        {{/isVisibilityProperty}}
        {{/isFloatArrayProperty}}
        {{#requiresLiteral}}
        case "{{value}}":
          if (jsonElement.isJsonPrimitive() && jsonElement.getAsJsonPrimitive().isString()) {
            properties.add(PropertyFactory.iconImage(jsonElement.getAsString()));
          } else {
            properties.add(PropertyFactory.iconImage(expression));
          }
        {{/requiresLiteral}}
        {{#isVisibilityProperty}}
        case "{{value}}":
          properties.add(PropertyFactory.{{valueAsCamelCase}}(entry.getValue().substring(1, entry.getValue().length() - 1)));
        {{/isVisibilityProperty}}
        {{#isFloatArrayProperty}}
        case "{{value}}":
          if (jsonElement.isJsonArray()) {
            final Float[] floatArray = convertJsonToFloatArray(jsonElement);
            if (floatArray != null) {
              properties.add(PropertyFactory.{{valueAsCamelCase}}(floatArray));
            } else {
              properties.add(PropertyFactory.{{valueAsCamelCase}}(expression));
            }
          } else {
            properties.add(PropertyFactory.{{valueAsCamelCase}}(expression));
          }
        {{/isFloatArrayProperty}}
          break;
        {{/layout_properties}}
        default:
          break;
      }
    }

    return properties.toArray(new PropertyValue[properties.size()]);
  }

{{/layerTypes}}
  private static boolean isNumber(JsonElement element) {
    return element.isJsonPrimitive() && element.getAsJsonPrimitive().isNumber();
  }

  private static Float[] convertJsonToFloatArray(JsonElement jsonElement) {
    final JsonArray jsonArray = jsonElement.getAsJsonArray();
    Float[] floatArray = new Float[jsonArray.size()];

    for (int i = 0; i < jsonArray.size(); i++) {
      if (jsonArray.get(i).isJsonPrimitive() && jsonArray.get(i).getAsJsonPrimitive().isNumber()) {
        floatArray[i] = jsonArray.get(i).getAsFloat();
      } else {
        return null;
      }
    }
    return floatArray;
  }
}